
import mongoose, { Schema, type Document } from 'mongoose';

export interface IPageComponent extends Document {
  _id?: string | mongoose.Types.ObjectId; // Allow string for client-side generation before save
  type: string; 
  config: mongoose.Schema.Types.Mixed; 
  order: number; 
  createdAt?: Date; // Timestamps can be helpful even for subdocs
  updatedAt?: Date;
}

export const PageComponentSchema = new Schema<IPageComponent>(
  {
    // _id is automatically generated by Mongoose for subdocuments if not _id: false
    type: {
      type: String,
      required: [true, 'Component type is required.'],
      enum: [
        'heading', 'text', 'image', 'button', 'section', 'columns', 'divider', 
        'customCode', 'video', 'form', 'input', 'textarea_field', 'map_embed',
        'navbar', 'hero', 'footer', 'card_section' // Added new components
      ],
    },
    config: {
      type: Schema.Types.Mixed,
      required: [true, 'Component configuration is required.'],
      default: {},
    },
    order: {
      type: Number,
      required: true,
      default: 0,
    },
  },
  { _id: true, timestamps: true } 
);

// No need to register as a model if only embedded
